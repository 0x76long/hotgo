// ================================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// You can delete these comments if you wish manually maintain this interface file.
// ================================================================================

package service

import (
	"context"
	"hotgo/api/backend/member"
	"hotgo/api/backend/menu"
	"hotgo/api/backend/role"
	"hotgo/internal/model/input/adminin"
)

type (
	IAdminMember interface {
		UpdateProfile(ctx context.Context, in adminin.MemberUpdateProfileInp) (err error)
		UpdatePwd(ctx context.Context, in adminin.MemberUpdatePwdInp) (err error)
		ResetPwd(ctx context.Context, in adminin.MemberResetPwdInp) (err error)
		EmailUnique(ctx context.Context, in adminin.MemberEmailUniqueInp) (*adminin.MemberEmailUniqueModel, error)
		MobileUnique(ctx context.Context, in adminin.MemberMobileUniqueInp) (*adminin.MemberMobileUniqueModel, error)
		NameUnique(ctx context.Context, in adminin.MemberNameUniqueInp) (*adminin.MemberNameUniqueModel, error)
		VerifySuperId(ctx context.Context, verifyId int64) bool
		Delete(ctx context.Context, in adminin.MemberDeleteInp) error
		Edit(ctx context.Context, in adminin.MemberEditInp) (err error)
		MaxSort(ctx context.Context, in adminin.MemberMaxSortInp) (*adminin.MemberMaxSortModel, error)
		View(ctx context.Context, in adminin.MemberViewInp) (res *adminin.MemberViewModel, err error)
		List(ctx context.Context, in adminin.MemberListInp) (list []*adminin.MemberListModel, totalCount int64, err error)
		LoginMemberInfo(ctx context.Context, req *member.InfoReq) (res *adminin.MemberLoginModel, err error)
		Login(ctx context.Context, in adminin.MemberLoginInp) (res *adminin.MemberLoginModel, err error)
		RoleMemberList(ctx context.Context, in adminin.RoleMemberListInp) (list []*adminin.MemberListModel, totalCount int64, err error)
		Status(ctx context.Context, in adminin.MemberStatusInp) (err error)
		GetIdByCode(ctx context.Context, in adminin.GetIdByCodeInp) (res *adminin.GetIdByCodeModel, err error)
	}
	IAdminMemberPost interface {
		UpdatePostIds(ctx context.Context, member_id int64, post_ids []int64) (err error)
		GetMemberByIds(ctx context.Context, member_id int64) (post_ids []int64, err error)
	}
	IAdminMenu interface {
		RoleList(ctx context.Context, in adminin.MenuRoleListInp) (*adminin.MenuRoleListModel, error)
		SearchList(ctx context.Context, req *menu.SearchListReq) (*menu.SearchListRes, error)
		MaxSort(ctx context.Context, req *menu.MaxSortReq) (*menu.MaxSortRes, error)
		NameUnique(ctx context.Context, req *menu.NameUniqueReq) (*menu.NameUniqueRes, error)
		CodeUnique(ctx context.Context, req *menu.CodeUniqueReq) (*menu.CodeUniqueRes, error)
		Delete(ctx context.Context, req *menu.DeleteReq) error
		Edit(ctx context.Context, req *menu.EditReq) (err error)
		View(ctx context.Context, req *menu.ViewReq) (res *menu.ViewRes, err error)
		List(ctx context.Context, req *menu.ListReq) (lists []map[string]interface{}, err error)
		GetMenuList(ctx context.Context, memberId int64) (lists role.DynamicRes, err error)
	}
	IAdminNotice interface {
		Delete(ctx context.Context, in adminin.NoticeDeleteInp) error
		Edit(ctx context.Context, in adminin.NoticeEditInp) (err error)
		Status(ctx context.Context, in adminin.NoticeStatusInp) (err error)
		MaxSort(ctx context.Context, in adminin.NoticeMaxSortInp) (*adminin.NoticeMaxSortModel, error)
		View(ctx context.Context, in adminin.NoticeViewInp) (res *adminin.NoticeViewModel, err error)
		List(ctx context.Context, in adminin.NoticeListInp) (list []*adminin.NoticeListModel, totalCount int64, err error)
	}
	IAdminPost interface {
		Delete(ctx context.Context, in adminin.PostDeleteInp) error
		Edit(ctx context.Context, in adminin.PostEditInp) (err error)
		MaxSort(ctx context.Context, in adminin.PostMaxSortInp) (*adminin.PostMaxSortModel, error)
		NameUnique(ctx context.Context, in adminin.PostNameUniqueInp) (*adminin.PostNameUniqueModel, error)
		CodeUnique(ctx context.Context, in adminin.PostCodeUniqueInp) (*adminin.PostCodeUniqueModel, error)
		View(ctx context.Context, in adminin.PostViewInp) (res *adminin.PostViewModel, err error)
		List(ctx context.Context, in adminin.PostListInp) (list []*adminin.PostListModel, totalCount int64, err error)
		GetMemberByStartName(ctx context.Context, memberId int64) (name string, err error)
		Status(ctx context.Context, in adminin.PostStatusInp) (err error)
	}
	IAdminRole interface {
		Verify(ctx context.Context, path, method string) bool
		List(ctx context.Context, in adminin.RoleListInp) (list []*adminin.RoleListModel, totalCount int64, err error)
		GetName(ctx context.Context, RoleId int64) (name string, err error)
		GetMemberList(ctx context.Context, RoleId int64) (list []*adminin.RoleListModel, err error)
		GetPermissions(ctx context.Context, reqInfo *role.GetPermissionsReq) (MenuIds []int64, err error)
		UpdatePermissions(ctx context.Context, reqInfo *role.UpdatePermissionsReq) error
		Edit(ctx context.Context, in *role.EditReq) (err error)
		Delete(ctx context.Context, in *role.DeleteReq) (err error)
	}
	IAdminDept interface {
		NameUnique(ctx context.Context, in adminin.DeptNameUniqueInp) (*adminin.DeptNameUniqueModel, error)
		Delete(ctx context.Context, in adminin.DeptDeleteInp) error
		Edit(ctx context.Context, in adminin.DeptEditInp) (err error)
		Status(ctx context.Context, in adminin.DeptStatusInp) (err error)
		MaxSort(ctx context.Context, in adminin.DeptMaxSortInp) (*adminin.DeptMaxSortModel, error)
		View(ctx context.Context, in adminin.DeptViewInp) (res *adminin.DeptViewModel, err error)
		List(ctx context.Context, in adminin.DeptListInp) (list adminin.DeptListModel, err error)
		ListTree(ctx context.Context, in adminin.DeptListTreeInp) (list []*adminin.DeptListTreeModel, err error)
		GetName(ctx context.Context, id int64) (name string, err error)
	}
)

var (
	localAdminNotice     IAdminNotice
	localAdminPost       IAdminPost
	localAdminRole       IAdminRole
	localAdminDept       IAdminDept
	localAdminMember     IAdminMember
	localAdminMemberPost IAdminMemberPost
	localAdminMenu       IAdminMenu
)

func AdminMemberPost() IAdminMemberPost {
	if localAdminMemberPost == nil {
		panic("implement not found for interface IAdminMemberPost, forgot register?")
	}
	return localAdminMemberPost
}

func RegisterAdminMemberPost(i IAdminMemberPost) {
	localAdminMemberPost = i
}

func AdminMenu() IAdminMenu {
	if localAdminMenu == nil {
		panic("implement not found for interface IAdminMenu, forgot register?")
	}
	return localAdminMenu
}

func RegisterAdminMenu(i IAdminMenu) {
	localAdminMenu = i
}

func AdminNotice() IAdminNotice {
	if localAdminNotice == nil {
		panic("implement not found for interface IAdminNotice, forgot register?")
	}
	return localAdminNotice
}

func RegisterAdminNotice(i IAdminNotice) {
	localAdminNotice = i
}

func AdminPost() IAdminPost {
	if localAdminPost == nil {
		panic("implement not found for interface IAdminPost, forgot register?")
	}
	return localAdminPost
}

func RegisterAdminPost(i IAdminPost) {
	localAdminPost = i
}

func AdminRole() IAdminRole {
	if localAdminRole == nil {
		panic("implement not found for interface IAdminRole, forgot register?")
	}
	return localAdminRole
}

func RegisterAdminRole(i IAdminRole) {
	localAdminRole = i
}

func AdminDept() IAdminDept {
	if localAdminDept == nil {
		panic("implement not found for interface IAdminDept, forgot register?")
	}
	return localAdminDept
}

func RegisterAdminDept(i IAdminDept) {
	localAdminDept = i
}

func AdminMember() IAdminMember {
	if localAdminMember == nil {
		panic("implement not found for interface IAdminMember, forgot register?")
	}
	return localAdminMember
}

func RegisterAdminMember(i IAdminMember) {
	localAdminMember = i
}
